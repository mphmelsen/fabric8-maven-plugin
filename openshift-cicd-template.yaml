apiVersion: v1
kind: Template
metadata:
  name: continuous-delivery
labels:
  template: continuous-delivery
  group: continuous-delivery
metadata:
  annotations:
    description: Creates the CI/CD infrastructure with Jenins, Nexus and SonarQube
    iconClass: icon-jenkins
    tags: instant-app,jenkins,nexus,continuous-delivery
  name: continuous-delivery
parameters:
- description: Password for the Jenkins user.
  displayName: Jenkins Password
  generate: expression
  name: JENKINS_PASSWORD
  value: password
- description: The name of the OpenShift Service exposed for the Jenkins container.
  displayName: Jenkins Service Name
  name: JENKINS_SERVICE_NAME
  value: jenkins
- description: Jenkins version to deploy
  displayName: Jenkins version
  name: JENKINS_VERSION
  required: true
  value: "latest"
- description: Nexus Repository service name
  name: NEXUS_SERVICE_NAME
  value: nexus
- description: Nexus version to deploy
  displayName: Nexus version
  name: NEXUS_VERSION
  required: true
  value: "latest"
- description: Username for PostgreSQL backend
  displayName: PostgreSQL User
  from: user[A-Z0-9]{3}
  generate: expression
  name: POSTGRESQL_USER
  required: true
- description: Password for Gogs Git Server PostgreSQL backend
  displayName: Gogs' PostgreSQL Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: GOGS_POSTGRESQL_PASSWORD
  required: true
- description: Password for SonarQube Server PostgreSQL backend
  displayName: SonarQube's PostgreSQL Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: SONAR_POSTGRESQL_PASSWORD
  required: true
- description: Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: VOLUME_CAPACITY_1G
  required: true
  value: 1Gi
- description: Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: VOLUME_CAPACITY_2G
  required: true
  value: 2Gi
- description: Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: VOLUME_CAPACITY_3G
  required: true
  value: 3Gi
objects:
# Jenkins Master
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: jenkins
    name: jenkins
  spec:
    dockerImageRepository: docker.io/library/jenkins
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${JENKINS_SERVICE_NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY_2G}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: jenkins
    name: jenkins
  spec:
    ports:
    - name: web
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: jnlp
      port: 50000
      protocol: TCP
      targetPort: 50000
    selector:
      app: jenkins
      deploymentconfig: jenkins
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: jenkins
    name: jenkins
  spec:
    port:
      targetPort: 8080
    to:
      kind: Service
      name: jenkins
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: jenkins
    name: jenkins
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: jenkins:latest
    resources:
      limits:
        memory: 2Gi
    source:
      contextDir: continuous-delivery/jenkins-master
      git:
        uri: https://gitlab.com/tsluijter/ViewPoint.git
        ref: master
      secrets: []
      type: Git
      sourceSecret:
        name: gitlab
      secrets: null
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: jenkins:latest
          namespace: openshift
      type: Source
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: jenkins
    name: jenkins
  spec:
    replicas: 1
    selector:
      app: jenkins
      deploymentconfig: jenkins
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: jenkins
          deploymentconfig: jenkins
      spec:
        containers:
        - env:
          - name: JENKINS_PASSWORD
            value: ${JENKINS_PASSWORD}
          image: " "
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /login
              port: 8080
            initialDelaySeconds: 60
            timeoutSeconds: 3
          name: jenkins
          readinessProbe:
            httpGet:
              path: /login
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 3
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 50000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/jenkins
            name: ${JENKINS_SERVICE_NAME}-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${JENKINS_SERVICE_NAME}-data
          persistentVolumeClaim:
            claimName: ${JENKINS_SERVICE_NAME}
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - jenkins
        from:
          kind: ImageStreamTag
          name: jenkins:${JENKINS_VERSION}
      type: ImageChange
# Jenkins Slave
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      slave-directory: /var/lib/jenkins
      slave-label: jdk8
    labels:
      role: jenkins-slave
    name: jdk-jenkins-slave
  spec: {}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Builds Jenkins slave image with JDK
    labels:
      name: jdk-slave
    name: jdk-jenkins-slave
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: jdk-jenkins-slave:latest
    source:
      contextDir: continuous-delivery/jenkins-slave
      git:
        uri: https://gitlab.com/tsluijter/ViewPoint.git
        ref: master
      secrets: []
      type: Git
      sourceSecret:
        name: gitlab
      secrets: null
    strategy:
      dockerStrategy:
        from:
          kind: DockerImage
          name: centos:7
      type: Docker
    triggers:
    - type: ConfigChange
# Sonatype Nexus
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: nexus
    name: nexus
  spec:
    dockerImageRepository: docker.io/sonatype/nexus
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: nexus
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY_3G}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Sonatype Nexus repository manager's http port
    labels:
      app: ${NEXUS_SERVICE_NAME}
    name: ${NEXUS_SERVICE_NAME}
  spec:
    ports:
    - name: web
      port: 8081
      protocol: TCP
      targetPort: 8081
    selector:
      app: ${NEXUS_SERVICE_NAME}
      deploymentconfig: ${NEXUS_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${NEXUS_SERVICE_NAME}
    name: ${NEXUS_SERVICE_NAME}
  spec:
    port:
      targetPort: web
    to:
      kind: Service
      name: ${NEXUS_SERVICE_NAME}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${NEXUS_SERVICE_NAME}
    name: ${NEXUS_SERVICE_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: nexus:latest
    resources:
      limits:
        memory: 2Gi
    source:
      contextDir: continuous-delivery/nexus
      git:
        uri: https://gitlab.com/tsluijter/ViewPoint.git
        ref: master
      secrets: []
      type: Git
      sourceSecret:
        name: gitlab
      secrets: null
    strategy:
      dockerStrategy:
        dockerfilePath:
      type: Docker
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
  status:
    lastVersion:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${NEXUS_SERVICE_NAME}
    name: ${NEXUS_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      app: ${NEXUS_SERVICE_NAME}
      deploymentconfig: ${NEXUS_SERVICE_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${NEXUS_SERVICE_NAME}
          deploymentconfig: ${NEXUS_SERVICE_NAME}
      spec:
        containers:
        - image: " "
          imagePullPolicy: Always
          name: nexus
          ports:
          - containerPort: 8081
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /opt/nexus-work
            name: ${NEXUS_SERVICE_NAME}-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        volumes:
        - name: nexus-data
          persistentVolumeClaim:
            claimName: nexus
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${NEXUS_SERVICE_NAME}
        from:
          kind: ImageStreamTag
          name: nexus:${NEXUS_VERSION}
      type: ImageChange
  status: {}
# SonarQube
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: sonarqube
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY_1G}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: postgresql-sonarqube
    labels:
      app: sonarqube
  spec:
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      app: sonarqube
      deploymentconfig: postgresql-sonarqube
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    name: sonarqube
    labels:
      app: sonarqube
  spec:
    ports:
    - name: sonarqube
      port: 9000
      protocol: TCP
      targetPort: 9000
    selector:
      app: sonarqube
      deploymentconfig: sonarqube
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      description: Route for SonarQube's http service.
    name: sonarqube
    labels:
      app: sonarqube
  spec:
    to:
      kind: Service
      name: sonarqube
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: sonarqube
    name: sonarqube
  spec:
    tags:
    - annotations:
        description: The SonarQube Docker image
        tags: sonarqube
        version: "5.5"
      from:
        kind: DockerImage
        name: openshiftdemos/sonarqube:5.5
      importPolicy: {}
      name: "5.5"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: sonarqube
      deploymentconfig: postgresql-sonarqube
    name: postgresql-sonarqube
  spec:
    replicas: 1
    selector:
      app: sonarqube
      deploymentconfig: postgresql-sonarqube
    strategy:
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: sonarqube
          deploymentconfig: postgresql-sonarqube
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            value: ${POSTGRESQL_USER}
          - name: POSTGRESQL_PASSWORD
            value: ${SONAR_POSTGRESQL_PASSWORD}
          - name: POSTGRESQL_DATABASE
            value: sonar
          image: registry.access.redhat.com/rhscl/postgresql-94-rhel7:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 2Gi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: postgresql-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: postgresql-data
          persistentVolumeClaim:
            claimName: sonarqube
    test: false
    triggers:
    - imageChangeParams:
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:latest
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
  status: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: sonarqube
      deploymentconfig: sonarqube
    name: sonarqube
  spec:
    replicas: 1
    selector:
      app: sonarqube
      deploymentconfig: sonarqube
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/container.sonarqube.image.entrypoint: '["./bin/run.sh"]'
        creationTimestamp: null
        labels:
          app: sonarqube
          deploymentconfig: sonarqube
      spec:
        containers:
        - env:
          - name: SONARQUBE_JDBC_PASSWORD
            value: ${SONAR_POSTGRESQL_PASSWORD}
          - name: SONARQUBE_JDBC_URL
            value: jdbc:postgresql://postgresql-sonarqube/sonar
          - name: SONARQUBE_JDBC_USERNAME
            value: ${POSTGRESQL_USER}
          image: " "
          imagePullPolicy: IfNotPresent
          name: sonarqube
          ports:
          - containerPort: 9000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - sonarqube
        from:
          kind: ImageStreamTag
          name: sonarqube:5.5
      type: ImageChange
  status: {}
