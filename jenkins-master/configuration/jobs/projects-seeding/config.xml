<?xml version='1.0' encoding='UTF-8'?>
<project>
    <actions/>
    <description></description>
    <keepDependencies>false</keepDependencies>
    <properties>
        <io.fabric8.jenkins.openshiftsync.BuildConfigProjectProperty plugin="openshift-sync@0.0.12">
            <uid></uid>
            <namespace></namespace>
            <name></name>
            <resourceVersion></resourceVersion>
            <contextDir></contextDir>
        </io.fabric8.jenkins.openshiftsync.BuildConfigProjectProperty>
    </properties>
    <scm class="hudson.scm.NullSCM"/>
    <canRoam>true</canRoam>
    <disabled>false</disabled>
    <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
    <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
    <triggers/>
    <concurrentBuild>false</concurrentBuild>
    <builders>
        <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl@1.51">
            <scriptText>def microservices = &apos;&apos;&apos;

                // the following list holds all microservice jobs that needs to be generated
                microservices {
                &apos;mjop-elements&apos; {
                url = &apos;http://bitbucket.openshift.itris.lan/itris/mjop-elements.git&apos;
                }
                &apos;mjop-services&apos; {
                url = &apos;http://bitbucket.openshift.itris.lan/itris/mjop-services.git&apos;
                }
                &apos;main-web-test&apos; {
                url = &apos;http://bitbucket.openshift.itris.lan/itris/main-web.git&apos;
                }
                }
                &apos;&apos;&apos;


                def slurper = new ConfigSlurper()
                // fix classloader problem using ConfigSlurper in job dsl
                slurper.classLoader = this.class.classLoader
                def config = slurper.parse(microservices)

                // create job for every microservice
                config.microservices.each { name, data -&gt;
                createBuildJob(name,data)
                }


                def createBuildJob(name,data) {

                multibranchPipelineJob(name) {

                // Adds a Git branch source.
                branchSources {
                git {

                // Sets credentials for authentication with the remote repository.
                credentialsId(&apos;jenkins&apos;)

                remote(data.url.toString())
                }
                }

                orphanedItemStrategy {
                discardOldItems {
                numToKeep(20)
                }
                }
                }
                }</scriptText>
            <usingScriptText>true</usingScriptText>
            <ignoreExisting>false</ignoreExisting>
            <ignoreMissingFiles>false</ignoreMissingFiles>
            <removedJobAction>DISABLE</removedJobAction>
            <removedViewAction>IGNORE</removedViewAction>
            <lookupStrategy>JENKINS_ROOT</lookupStrategy>
        </javaposse.jobdsl.plugin.ExecuteDslScripts>
    </builders>
    <publishers/>
    <buildWrappers/>
</project>