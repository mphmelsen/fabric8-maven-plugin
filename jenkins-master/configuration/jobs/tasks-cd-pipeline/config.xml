<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.0">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.0">
    <script>node(&apos;jdk8&apos;) {
   // define commands
   def mvnHome = tool &apos;M3&apos;
   def mvnCmd = &quot;${mvnHome}/bin/mvn -s ${env.JENKINS_HOME}/settings.xml&quot;
   def ocCmd = &quot;/usr/bin/oc --token=`cat /var/run/secrets/kubernetes.io/serviceaccount/token` --server=https://openshift.default.svc.cluster.local --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt&quot;


   stage &apos;Build&apos;

   git url: &apos;http://gogs.openshift.itris.lan/itris/cicd-config.git&apos;

   // checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], browser: [$class: &apos;FisheyeGitRepositoryBrowser&apos;, repoUrl: &apos;fisheye.itris.net&apos;], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &apos;56f332b5-0c99-4477-8dbc-fdd6ba9a44e0&apos;, url: &apos;https://gitlab.com/tsluijter/ViewPoint.git&apos;]]])


        def v = version()
   sh &quot;${mvnCmd} clean install -DskipTests=true&quot;

   stage &apos;Test and Analysis&apos;
   parallel (
       &apos;Test&apos;: {
           sh &quot;${mvnCmd} test&quot;
           step([$class: &apos;JUnitResultArchiver&apos;, testResults: &apos;**/target/surefire-reports/TEST-*.xml&apos;])
       },
       &apos;Static Analysis&apos;: {
           sh &quot;${mvnCmd} jacoco:report sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true&quot;
       }
   )

   stage &apos;Push to Nexus&apos;
   sh &quot;${mvnCmd} deploy -DskipTests=true&quot;

   stage &apos;Deploy DEV&apos;
   sh &quot;rm -rf oc-build &amp;&amp; mkdir -p oc-build/deployments&quot;
   //sh &quot;cp target/*.war oc-build/deployments/ROOT.war&quot;
   [&quot;sh&quot;, &quot;-c&quot;, &quot;find . -name '*.war' -print0 | xargs -0 cp -t oc-build/deployments/&quot;].execute()
   // clean up. keep the image stream
   sh &quot;${ocCmd} delete bc,dc,svc,route -l app=tasks -n dev&quot;
   // create build. override the exit code since it complains about exising imagestream
   sh &quot;${ocCmd} new-build --name=tasks --image-stream=jboss-eap64-openshift --binary=true --labels=app=tasks -n dev || true&quot;
   // build image
   sh &quot;${ocCmd} start-build tasks --from-dir=oc-build --wait=true -n dev&quot;
   // deploy image
   sh &quot;${ocCmd} new-app tasks:latest -n dev&quot;
   sh &quot;${ocCmd} expose svc/tasks -n dev&quot;
   // tag for stage
   sh &quot;${ocCmd} tag dev/tasks:latest stage/tasks:${v}&quot;

   stage &apos;Deploy STAGE&apos;
   // clean up. keep the imagestream
   sh &quot;${ocCmd} delete bc,dc,svc,route -l app=tasks -n stage&quot;
   // deploy stage image
   sh &quot;${ocCmd} new-app tasks:${v} -n stage&quot;
   sh &quot;${ocCmd} expose svc/tasks -n stage&quot;
}

def version() {
  def matcher = readFile(&apos;pom.xml&apos;) =~ &apos;&lt;version&gt;(.+)&lt;/version&gt;&apos;
  matcher ? matcher[0][1] : null
}

</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
</flow-definition>
