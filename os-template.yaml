---
kind: Template
apiVersion: v1
metadata:
  name: "mjopelements"
  annotations:
    iconClass: icon-jboss
    description: Application template for mjop-elements EAP 6 & Postgresql built using
      Docker
labels:
  application: mjop-elements
parameters:
- description: The name for the application.
  name: APPLICATION_NAME
  value: mjop-elements
- description: 'Custom hostname for service routes.  Leave blank for default hostname,
    e.g.: <application-name>.<project>.<default-domain-suffix>'
  name: APPLICATION_HOSTNAME
- description: Git source URI for application
  name: GIT_URI
  value: https://github.com/jorgemoralespou/openshift3mlbparks.git
- description: Git branch/tag reference
  name: GIT_REF
  value: master
- description: Maven mirror url. If nexus is deployed locally, use nexus url (e.g.
    http://nexus.ci.apps.10.2.2.2.xip.io/content/groups/public/)
  name: MAVEN_MIRROR_URL
  displayName: Maven mirror url
  required: false
- description: Generic build trigger secret
  name: GENERIC_TRIGGER_SECRET
  from: "[a-zA-Z0-9]{8}"
  generate: expression
- name: MEMORY_LIMIT
  displayName: Memory Limit
  description: Maximum amount of memory the container can use.
  value: 512Mi
- name: NAMESPACE
  displayName: Namespace
  description: The OpenShift Namespace where the ImageStream resides.
  value: openshift
- name: DATABASE_SERVICE_NAME
  displayName: Database Service Name
  description: The name of the OpenShift Service exposed for the database.
  value: postgres
  required: true
- name: POSTGRESQL_USER
  displayName: PostgreSQL Connection Username
  description: Username for PostgreSQL user that will be used for accessing the database.
  generate: expression
  from: user[A-Z0-9]{3}
  required: true
- name: POSTGRESQL_PASSWORD
  displayName: PostgreSQL Connection Password
  description: Password for the PostgreSQL connection user.
  generate: expression
  from: "[a-zA-Z0-9]{16}"
  required: true
- name: POSTGRESQL_DATABASE
  displayName: PostgreSQL Database Name
  description: Name of the PostgreSQL database accessed.
  value: sampledb
  required: true
- name: VOLUME_CAPACITY
  displayName: Volume Capacity
  description: Volume space available for data, e.g. 512Mi, 2Gi.
  value: 1Gi
  required: true
- name: POSTGRESQL_VERSION
  displayName: Version of PostgreSQL Image
  description: Version of PostgreSQL image to be used (9.2, 9.4, 9.5 or latest).
  value: '9.5'
  required: true


# Application and applicationserver setup
objects:
#- apiVersion: v1
#  kind: BuildConfig
#  metadata:
#    annotations:
#      description: Builds the mjop-elements wildfly image
#    labels:
#      name: ${APPLICATION_NAME}
#    name: ${APPLICATION_NAME}
#  spec:
#    output:
#      to:
#        kind: ImageStreamTag
#        name: "${APPLICATION_NAME}:latest"
#    source:
#      contextDir: docker
#      git:
#        uri: http://gogs.openshift.itris.lan/itris/mjop-elements
#      type: git
#      secrets: []
#    strategy:
#      type: Docker
#    triggers:
#    - type: ConfigChange
#    - imageChange: {}
#      type: ImageChange
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
  spec:
    tags:
    - name: latest
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      deploymentConfig: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${APPLICATION_NAME}"
        from:
          kind: ImageStreamTag
          name: "${APPLICATION_NAME}:latest"
    - type: ConfigChange
    replicas: 1
    selector:
      deploymentConfig: "${APPLICATION_NAME}"
    template:
      metadata:
        labels:
          deploymentConfig: "${APPLICATION_NAME}"
      spec:
        containers:
        - name: "${APPLICATION_NAME}"
          image: "${APPLICATION_NAME}"
          ports:
          - name: "${APPLICATION_NAME}-h"
            containerPort: 8080
            protocol: TCP
          - name: "${APPLICATION_NAME}-a"
            containerPort: 9990
            protocol: TCP
          - name: "${APPLICATION_NAME}-d"
            containerPort: 8787
            protocol: TCP
          readinessProbe:
            httpGet:
              path: "/"
              port: 8080
          env:
          - name: OPENSHIFT_DNS_PING_SERVICE_NAME
            value: "${APPLICATION_NAME}-ping"
          - name: OPENSHIFT_DNS_PING_SERVICE_PORT
            value: '8080'
          - name: POSTGRES_USER
            value: ${POSTGRESQL_USER}
          - name: POSTGRES_PASSWORD
            value: ${POSTGRESQL_PASSWORD}
          - name: POSTGRES_DATABASE
            value: ${POSTGRESQL_DATABASE}
          resources: {}
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: Always
          securityContext:
            capabilities: {}
            privileged: false
        restartPolicy: Always
        dnsPolicy: ClusterFirst
- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    annotations:
      description: The web server's http port
  spec:
    ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
    selector:
      deploymentConfig: "${APPLICATION_NAME}"
- kind: Route
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    annotations:
      description: Route for application's http service
  spec:
    host: "${APPLICATION_HOSTNAME}"
    to:
      kind: Service
      name: "${APPLICATION_NAME}"
# Database setup
- kind: Service
  apiVersion: v1
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
    creationTimestamp:
  spec:
    ports:
    - name: "${DATABASE_SERVICE_NAME}"
      protocol: TCP
      port: 5432
      targetPort: 5432
      nodePort: 0
    selector:
      name: "${DATABASE_SERVICE_NAME}"
    type: ClusterIP
    sessionAffinity: None
  status:
    loadBalancer: {}
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${VOLUME_CAPACITY}"
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
    creationTimestamp:
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:${POSTGRESQL_VERSION}
          namespace: "${NAMESPACE}"
        lastTriggeredImage: ''
    - type: ConfigChange
    replicas: 1
    selector:
      name: "${DATABASE_SERVICE_NAME}"
    template:
      metadata:
        creationTimestamp:
        labels:
          name: "${DATABASE_SERVICE_NAME}"
      spec:
        containers:
        - name: "${DATABASE_SERVICE_NAME}"
          image: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 5
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
          livenessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 30
            tcpSocket:
              port: 5432
          env:
          - name: POSTGRESQL_USER
            value: "${POSTGRESQL_USER}"
          - name: POSTGRESQL_PASSWORD
            value: "${POSTGRESQL_PASSWORD}"
          - name: POSTGRESQL_DATABASE
            value: "${POSTGRESQL_DATABASE}"
          resources:
            limits:
              memory: "${MEMORY_LIMIT}"
          volumeMounts:
          - name: "${DATABASE_SERVICE_NAME}-data"
            mountPath: "/var/lib/pgsql/data"
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: IfNotPresent
          capabilities: {}
          securityContext:
            capabilities: {}
            privileged: false
        volumes:
        - name: "${DATABASE_SERVICE_NAME}-data"
          persistentVolumeClaim:
            claimName: "${DATABASE_SERVICE_NAME}"
        restartPolicy: Always
        dnsPolicy: ClusterFirst
  status: {}
